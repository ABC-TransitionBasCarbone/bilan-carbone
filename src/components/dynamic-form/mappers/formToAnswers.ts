import { FormValues } from '../types/formTypes'
import { Answer, Question } from '../types/questionTypes'
import { TypeConverter } from './typeConverters'

export const formValuesToAnswers = async (
  formValues: FormValues,
  questions: Question[],
  studyId: string,
): Promise<Answer[]> => {
  const answers: Answer[] = []

  for (const question of questions) {
    const value = formValues[question.idIntern]

    // Skip if value is empty/undefined (except for boolean false)
    if (
      value === undefined ||
      value === null ||
      (value === '' && question.type !== 'boolean') ||
      (Array.isArray(value) && value.length === 0)
    ) {
      continue
    }

    const context = {
      questionType: question.type,
      format: question.format,
      possibleAnswers: question.possibleAnswers,
    }

    // Validate the value before conversion
    const validation = TypeConverter.validateValue(value, context)
    if (!validation.isValid) {
      console.warn(`Invalid value for question ${question.idIntern}: ${validation.error}`)
      continue
    }

    // Convert form value to responses array
    const responses = TypeConverter.formValueToResponses(value, context)

    if (responses.length > 0) {
      answers.push({
        id: '', // Will be generated by server
        questionId: question.id,
        studyId,
        responses,
        createdAt: new Date(),
        updatedAt: new Date(),
      })
    }
  }

  return answers
}

export const validateFormValues = (
  formValues: FormValues,
  questions: Question[],
): { isValid: boolean; errors: Record<string, string> } => {
  const errors: Record<string, string> = {}

  for (const question of questions) {
    const value = formValues[question.idIntern]

    // Check required fields
    if (question.required) {
      if (value === undefined || value === null || value === '' || (Array.isArray(value) && value.length === 0)) {
        errors[question.idIntern] = 'This field is required'
        continue
      }
    }

    // Skip validation for empty non-required fields
    if (!question.required && (value === undefined || value === null || value === '')) {
      continue
    }

    const context = {
      questionType: question.type,
      format: question.format,
      possibleAnswers: question.possibleAnswers,
    }

    const validation = TypeConverter.validateValue(value, context)
    if (!validation.isValid) {
      errors[question.idIntern] = validation.error || 'Invalid value'
    }
  }

  return {
    isValid: Object.keys(errors).length === 0,
    errors,
  }
}
