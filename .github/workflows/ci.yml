name: CI
on:
  push:
jobs:
  lint-and-typecheck:
    timeout-minutes: 10
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: 'yarn'
      - name: Install dependencies
        run: yarn install --immutable --immutable-cache --check-cache
      - name: Generate prisma files
        run: npx prisma generate
      - name: Linter
        run: yarn lint
      - name: TypeScript check
        run: npx tsc --noEmit

  unit-tests:
    timeout-minutes: 10
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: 'yarn'
      - name: Copy .env
        run: cp .env.dist .env
      - name: Install dependencies
        run: yarn install --immutable --immutable-cache --check-cache
      - name: Generate prisma files
        run: npx prisma generate
      - name: Launch unit tests
        run: yarn run test

  build:
    timeout-minutes: 20
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: 'yarn'
      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "dir=$(yarn cache dir)" >> $GITHUB_OUTPUT
      - name: Cache yarn dependencies
        uses: actions/cache@v4
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-
      - name: Cache Next.js build
        uses: actions/cache@v4
        with:
          path: ${{ github.workspace }}/.next/cache
          key: ${{ runner.os }}-nextjs-${{ hashFiles('**/yarn.lock') }}-${{ hashFiles('**/*.js', '**/*.jsx', '**/*.ts', '**/*.tsx') }}
          restore-keys: |
            ${{ runner.os }}-nextjs-${{ hashFiles('**/yarn.lock') }}-
      - name: Install dependencies
        run: yarn install --immutable --immutable-cache --check-cache
      - name: Generate prisma files
        run: npx prisma generate
      - name: Build application
        run: yarn build
      - name: Create compressed build archive
        run: tar -czf build-artifacts.tar.gz .next node_modules/.prisma package.json next.config.mjs
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: build-artifacts.tar.gz
          retention-days: 1

  e2e-tests:
    timeout-minutes: 30
    runs-on: ubuntu-latest
    needs: [lint-and-typecheck, build, unit-tests]
    services:
      postgres:
        image: postgres:17
        env:
          POSTGRES_USER: bilancarbone
          POSTGRES_PASSWORD: bilancarbone
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: 'yarn'
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
      - name: Extract build artifacts
        run: tar -xzf build-artifacts.tar.gz
      - name: Run maildev
        run: docker run -d -p 1080:1080 -p 1025:1025 maildev/maildev
      - name: Copy .env
        run: cp .env.dist .env
      - name: Install dependencies
        run: yarn install --immutable --immutable-cache --check-cache
      - name: Generate prisma files
        run: npx prisma generate
      - name: Start server
        run: yarn start &
      - name: Reset and seed database for tests
        run: npx prisma migrate reset --force
      - name: Wait for hydration complete
        run: |
          npx wait-on http://localhost:3000 --timeout 30000
          sleep 3
      - name: Launch e2e tests
        run: yarn run cypress
      - name: Upload screenshots
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: cypress-screenshots
          path: /home/runner/work/bilan-carbone/bilan-carbone/cypress/screenshots

  lighthouse:
    timeout-minutes: 15
    runs-on: ubuntu-latest
    needs: [lint-and-typecheck, build]
    services:
      postgres:
        image: postgres:17
        env:
          POSTGRES_USER: bilancarbone
          POSTGRES_PASSWORD: bilancarbone
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: 'yarn'
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
      - name: Extract build artifacts
        run: tar -xzf build-artifacts.tar.gz
      - name: Run maildev
        run: docker run -d -p 1080:1080 -p 1025:1025 maildev/maildev
      - name: Copy .env
        run: cp .env.dist .env
      - name: Install dependencies
        run: yarn install --immutable --immutable-cache --check-cache
      - name: Generate prisma files
        run: npx prisma generate
      - name: Migrate DB
        run: npx prisma migrate deploy
      - name: Seed DB
        run: npx prisma db seed
      - name: Start server
        run: yarn start &
      - run: mkdir -p ${{ github.workspace }}/tmp/artifacts
      - name: Lighthouse Check
        uses: foo-software/lighthouse-check-action@master
        id: lighthouseCheck
        with:
          device: all
          urls: 'http://localhost:3000'
          outputDirectory: ${{ github.workspace }}/tmp/artifacts
      - name: Verify Lighthouse Check results
        uses: foo-software/lighthouse-check-status-action@master
        with:
          lighthouseCheckResults: ${{ steps.lighthouseCheck.outputs.lighthouseCheckResults }}
          minAccessibilityScore: '100'
          # TODO : set back to 100 when all CSP error logs are fixed
          minBestPracticesScore: '90'
      - name: Upload Lighthouse artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: Lighthouse reports
          path: ${{ github.workspace }}/tmp/artifacts
