name: CI
on:
  push:
jobs:
  lint-and-typecheck:
    timeout-minutes: 10
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 22.16.0
          cache: 'yarn'
      - name: Install dependencies
        run: yarn install --immutable --immutable-cache --check-cache
      - name: Generate prisma files
        run: npx prisma generate
      - name: Linter
        run: yarn lint
      - name: TypeScript check
        run: npx tsc --noEmit

  unit-tests:
    timeout-minutes: 10
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 22.16.0
          cache: 'yarn'
      - name: Copy .env
        run: cp .env.dist .env
      - name: Install dependencies
        run: yarn install --immutable --immutable-cache --check-cache
      - name: Generate prisma files
        run: npx prisma generate
      - name: Launch unit tests
        run: yarn run test

  e2e-tests:
    timeout-minutes: 30
    runs-on: ubuntu-latest
    needs: [lint-and-typecheck, unit-tests]
    services:
      postgres:
        image: postgres:17
        env:
          POSTGRES_USER: bilancarbone
          POSTGRES_PASSWORD: bilancarbone
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 22.16.0
          cache: 'yarn'
      - name: Run maildev
        run: docker run -d -p 1080:1080 -p 1025:1025 maildev/maildev
      - name: Copy .env
        run: cp .env.dist .env
      - name: Copy .env.test
        run: cp .env.dist .env.test
      - name: Install dependencies
        run: yarn install --immutable --immutable-cache --check-cache
      - name: Generate prisma files
        run: npx prisma generate
      - name: Migrate DB
        run: npx prisma migrate deploy
      - name: Seed DB
        run: npx prisma db seed
      - name: Build application
        run: yarn build
      - name: Start server
        run: yarn start:test &
      - name: Launch e2e tests
        run: |
          for spec in src/tests/end-to-end/app/*.cy.ts; do
            echo "Running test: $spec"
            yarn cypress run --spec "$spec" --headless || exit 1
          done
      - name: Upload screenshots
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: cypress-screenshots
          path: /home/runner/work/bilan-carbone/bilan-carbone/cypress/screenshots

  lighthouse:
    timeout-minutes: 10
    runs-on: ubuntu-latest
    needs: [lint-and-typecheck, unit-tests]
    services:
      postgres:
        image: postgres:17
        env:
          POSTGRES_USER: bilancarbone
          POSTGRES_PASSWORD: bilancarbone
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 22.16.0
          cache: 'yarn'
      - name: Run maildev
        run: docker run -d -p 1080:1080 -p 1025:1025 maildev/maildev
      - name: Copy .env
        run: cp .env.dist .env
      - name: Install dependencies
        run: yarn install --immutable --immutable-cache --check-cache
      - name: Generate prisma files
        run: npx prisma generate
      - name: Migrate DB
        run: npx prisma migrate deploy
      - name: Seed DB
        run: npx prisma db seed
      - name: Build application
        run: yarn build
      - name: Start server
        run: yarn start &
      - run: mkdir -p ${{ github.workspace }}/tmp/artifacts
      - name: Lighthouse Check
        uses: foo-software/lighthouse-check-action@master
        id: lighthouseCheck
        with:
          device: all
          urls: 'http://localhost:3000'
          outputDirectory: ${{ github.workspace }}/tmp/artifacts
      - name: Verify Lighthouse Check results
        uses: foo-software/lighthouse-check-status-action@master
        with:
          lighthouseCheckResults: ${{ steps.lighthouseCheck.outputs.lighthouseCheckResults }}
          minAccessibilityScore: '100'
          # TODO : set back to 100 when all CSP error logs are fixed
          minBestPracticesScore: '90'
      - name: Upload Lighthouse artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: Lighthouse reports
          path: ${{ github.workspace }}/tmp/artifacts
